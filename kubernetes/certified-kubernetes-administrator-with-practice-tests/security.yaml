# kube-apiserver
# --------------

1. quien puede acceder al cluster?
2. que puede hacer?

- Toda comunicacion entre los servicios con el kube-apisever estan encriptadas
con TLS

- La comunicacion entre aplicaciones del cluster, por defecto todos los PODS
se pueden alcanzar entre ellos. Se puede limitar por red

# Autenticacion
# -------------

Usuarios:
  -- [humanos] --
  - Admins
  - Developers
  -- [soft] --
  - Bots

  - App Users: (la seguridad de estos la maneja la app internamente)



# Usuarios
# --------

Admin: usa kubectl

Developer: curl https://kube-server-ip:6443/

--> 
  Ambos conectan con el kube-apiserver que los autentica y
  procesa el request

# Metodos del kube-apiserver para auth
# ------------------------------------

- static password file
- static token file
- certificados
- identity services (ldap)

# Static password/token file
# --------------------------

kube-apiserver.service
...
--basic-auth-file=user-details.csv
....


# user-details.csv
# --------------
password123,user1,u0001
password123,user2,u0002
password123,user3,u0003

# Autenticar usuario por curl (no entendi bien por que)
curl -v -k https://master-node-ip:6443/api/v1/pods -u "user1:password123"

# Mecanismos de autenticacion - Basics
# ------------------------------------

En tokens es mas o menos igual. El user-details, tambien tiene una columna de grupo
, existe un archivo de token, que tiene token,user,uid
y al kube-apiserver.service se le pasa un flag de que archivo tiene que tomar
los tokens para validar. Idem, los curl tienen una sintaxis similar, y en resumen
todas estas practicas son inseguras.


# Lo de mas abajo es un HOWTO que ni lei
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------

# # Article on Setting up Basic Authentication
# # --------------------------------------------
# Setup basic authentication on kubernetes
# Note: This is not recommended in a production environment. This is only for learning purposes.

# Follow the below instructions to configure basic authentication in a kubeadm setup.

# Create a file with user details locally at /tmp/users/user-details.csv

# # User File Contents
# password123,user1,u0001
# password123,user2,u0002
# password123,user3,u0003
# password123,user4,u0004
# password123,user5,u0005


# Edit the kube-apiserver static pod configured by kubeadm to pass in the user details. The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml



# apiVersion: v1
# kind: Pod
# metadata:
#   name: kube-apiserver
#   namespace: kube-system
# spec:
#   containers:
#   - command:
#     - kube-apiserver
#       <content-hidden>
#     image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
#     name: kube-apiserver
#     volumeMounts:
#     - mountPath: /tmp/users
#       name: usr-details
#       readOnly: true
#   volumes:
#   - hostPath:
#       path: /tmp/users
#       type: DirectoryOrCreate
#     name: usr-details


# Modify the kube-apiserver startup options to include the basic-auth file



# apiVersion: v1
# kind: Pod
# metadata:
#   creationTimestamp: null
#   name: kube-apiserver
#   namespace: kube-system
# spec:
#   containers:
#   - command:
#     - kube-apiserver
#     - --authorization-mode=Node,RBAC
#       <content-hidden>
#     - --basic-auth-file=/tmp/users/user-details.csv
# Create the necessary roles and role bindings for these users:



# ---
# kind: Role
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   namespace: default
#   name: pod-reader
# rules:
# - apiGroups: [""] # "" indicates the core API group
#   resources: ["pods"]
#   verbs: ["get", "watch", "list"]
 
# ---
# # This role binding allows "jane" to read pods in the "default" namespace.
# kind: RoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: read-pods
#   namespace: default
# subjects:
# - kind: User
#   name: user1 # Name is case sensitive
#   apiGroup: rbac.authorization.k8s.io
# roleRef:
#   kind: Role #this must be Role or ClusterRole
#   name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
#   apiGroup: rbac.authorization.k8s.io
# Once created, you may authenticate into the kube-api server using the users credentials

# curl -v -k https://localhost:6443/api/v1/pods -u "user1:password123"


# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------


# TLS BASICS
# ----------

# private key
openssl genrsa -out my-bank.key 1024
-> my-bank.key

# public key
openssl rsa -in my-bank.key -pubout > mybank.pem
-> my-bank.key mybank.pem

# Genero certificado self-signed
# Certificate Signing Request (CSR)
openssl req -new -key my-bank.key -out my-bank.csr -subj "/C=US/ST=CA/O=MyOrg, Inc./CN=my-bank.com"


Explicacion de la encriptacion entre browser y http server

1. El browser usa una KEY  simetrica. 
2. El 1er request al server es plano, este le devuelve la key publica.
3. Con la key publica el USER encripta SU key simetrica y la envia al server.
4. El server con su KEY privada desencripta la key simetrica del user. Ahora
ambos, server y user tienen la misma key simetrica.
5. User encripta con key simetrica y server desencripta con la key simetrica y 
viceversa

PKI: Public Key Infraestructure

Nomenclatura:

# Certificados (Public Key)
# -------------------------
*.crt  *.pem

server.crt
server.pem
client.crt
client.pem

# Private Key
# -----------
*.key  *-key.pem

server.key
server-key.pem
client.key
client-key.pem

# TLS in Kubernetes
# ------------------

TIP: Herramientas para crear certificados:

  - openssl
  - easyrsa
  - cfssl

# OPENSSL
# --------

Certificate Authority(CA)
-------------------------
# Genero keys (ca.key)
openssl genrsa -ouy ca.key 2048

# Certificate Signing Request (ca.csr)
# Es un certificado con todos nuestros datos pero sin firma.
# Especificamos el nombre del componente de para que es el Certificado.
# En este caso estamos creando un certificado para el KUBERNETES-CA que
# va a ser la autoridad que me firma los certificados entre componentes
# del cluster Kubernetes
openssl req -new -key ca.key -subj '/CN=KUBERNETES-CA' -out ca.csr

# Firmamos el certificado
openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt

# Inspeccionando un certificado
openssl x509 -in ca.crt -noout -text

# Ejemplo para un cliente:
1. Genero su key privada (admin.key)
2. Genero su certificado (admin.csr)
3. Firmo el certificado pero ahora especifico el CA que ya cree

openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out admin.crt

# Como se usarian los certificados?
curl https://kube-apiserver:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt

# Todo esto puede serv movido a un archivo
kube-config.yaml
apiVersion: v1
clusters:
- cluster:
    certificate-authority: ca.crt
    server: https://kube-apiserver:6443
  name: kubernetes
kind: Config
users:
  - name: kubernetes-admin
    user:
      client-certificate: admin.crt
      client-key: admin.key


# Existen casos, si quiero armar los certificados para el kube-api
# que cada servicio lo puede llamar por distinto nombre, entonces en el 
# certificado tengo que poner todos sus nombres de DNS. Para ello
# a la generacion del certificado le paso de parametro un archivo
# de configuracion
# openssl.cnf



# -----------------
# View Certificates
# -----------------

Si kubernetes se instalo de la manera dificil los archivos del kube-apiserver estan:
/etc/systemd/system/kube-apiserver.service

Si se instalo con kubeadm:
/etc/kubernetes/manifests/kube-apiserver.yaml


Chequear logs
# hard way
journalctl -u etcd.service -l

kubectl logs etcd-master

/etc/kubernetes/pki/etcd/server-certificate.crt


# Certificates API
# -----------------

Trata de que si yo soy un usuario, genero mi certificado para autenticarme
contra el server. Pero cuando hay muchos usuarios, necesito una forma
automatica. Entonces dado mi certificado autogenerado, necesito que el
server me lo valide para loguearme.

# 1. Usuario crea su certificado
openssl genrsa -out pepe.key 2048
# genero el certificate request
openssl req -new -key pepe.key -subj "/CN=pepe" -out pepe.csr

# Creo un Certificate Request Object
# -----------------------------------
pepe-csr.yml
# ----------
apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: pepe
spec:
  groups:
    - system: authenticated
  usages:
    - digital signature
    - key encipherment
    - server auth
  request:
    <aca adentro va: cat pepe.csr | base64 >

kubectl apply -f pepe-csr.yml


# Comando para ver los CSR
kubectl get csr
-->
# NAME    AGE     REQUESTOR         CONDITION
# pepe    10m     admin@example.com   Pending  

# Apruebo/firmo
kubectl certificate approve pepe
# Deniego
kubectl certificate deny pepe
kubectl delete csr pepe

# Veo el cert
kubectl get csr pepe -o yaml

# Controller Manager
# ------------------
Encargado de los certificados
Modulos:
  CSR-APPROVING
  CSR-SIGNING

# ------------------------
# KubeConfig
# ------------------------

# kubectl get pods
# ----------------
curl https://my-kube:6443/api/v1/pods \
--key admin.key
--cert admin.crt
--cacert ca.crt

# Ejemplo de mi minikube
# ----------------------
curl https://192.168.99.100:8443/api/v1/pods \
--key /home/$USER/.minikube/client.key \
--cert /home/$USER/.minikube/client.crt \
--cacert .minikube/ca.crt
# ===
kubectl get pods
--server https://192.168.99.100:8443
--client-key /home/$USER/.minikube/client.key
--client-certificate /home/$USER/.minikube/client.crt
--certificate-authority .minikube/ca.crt

# Esto es incomodo, entonces creo un archivo:
# config
--server https://192.168.99.100:8443
--client-key /home/$USER/.minikube/client.key
--client-certificate /home/$USER/.minikube/client.crt
--certificate-authority .minikube/ca.crt

# Pod defecto se busca el archivo 'config' dentro 
# de la carpeta .kube en el home del user que ejecuta
kubectl get pods --kubeconfig config
# es lo mismo que
kubectl get pods

# KubeConfig File
$HOME/.kube/config

# Formato:
3 secciones: 
  - Clusters: los clustes de k8s a los que tiene acceso el usr. (development, production, google, etc)
    -> --server
  - Users: Cuentas de usuario (usernames) con las que tengo acceso a estos clusters (admin, dev_user, prod_user)
    -->
    --client-key /home/$USER/.minikube/client.key
    --client-certificate /home/$USER/.minikube/client.crt
    --certificate-authority .minikube/ca.crt

  - Contexts: Entrelaza clusters con users (admin@production)

# --------------------------------------------------
# config file
# --------------------------------------------------
apiVersion: v1
kind: Config
# Si tengo varios contextos esta linea especifica el DEFAULT
current-context: my-kube-admin@my-kube-playground

clusters:
- name: my-kube-playground
  cluster:
    server: https://my-kube-playground:6443
    certificate-authority: ca.crt
    # Otra forma es usar:
    # cat ca.crt|base64
    # y en vez de usar certificate-authority
    certificate-authority-data:
      <hash>


contexts:
- name: my-kube-admin@my-kube-playground
  context:
    cluster: my-kube-playground  #el nombre en clusters
    user: my-kube-admin          #el nombre en users
    # Se puede especificar el namespace que uso por defecto
    namespace: finance
users:
- name: my-kube-admin
  user:
    # Usar full path en certificados
    client-certificate: admin.crt
    client-key: admin.key

# Linea de comandos
# -----------------
kubecto config view
kubecto config view --kubeconfig=mi_archivo_config
# para usar un context especifico
kubectl config use-context prod-user@production

