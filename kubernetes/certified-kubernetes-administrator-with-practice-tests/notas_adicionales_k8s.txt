# En VM con 
# cpu: host-passtrougth
# kvm instalado. No hace falta, bridge
# docker-machine-driver-kvm2 instalado
# curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2
# chmod +x docker-machine-driver-kvm2
# sudo mv docker-machine-driver-kvm2 /usr/local/bin/
# kubectl instalado
# minikube
# yum install bash-completion bash-completion-extras
# echo 'source <(kubectl completion bash)' >>~/.bashrc
# kubectl completion bash >/etc/bash_completion.d/kubectl


# Notas Minikube
# ----------------------
# Como arrancar minikube
stop libvirtd
stop docker
iptables -F de todo
start libvirtd
start docker
minikube start --vm-drive kvm2 --logtostderr
# 
kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080
kubectl expose deployment hello-minikube --type=NodePort
curl  $(minikube service hello-minikube --url)
kubectl delete deployment hello-minikube
minikube stop
# ------------------------------------------


# Notas sobre Edicion de PODs
# ===========================

# No se puede editar specificaciones
# de un POD existente, aparte de las siguientes:

- spec.containers[*].image
- spec.initContainers[*].image
- spec.activeDeadlineSeconds
- spec.tolerations

# Por ejemplo, no se puede editar:
- variables de environment
- service accounts
- resource limits

# Alternativas:

1. kubectl edit pod <pod-name>

# abre el vim y cuando lo guardo se aplica. Salvo que sea un 
# atributo de estos no modificables, al salvarlo dara error
# y sera guardado en un tmp. Entonces solo se puede borrar
# el pod y crearlo con kubectl y el yml temporal.

2. Segunda opcion dumpear el xml del pod que esta corriendo

kubectl get pod pod-name -o yaml > yml
