# YAML - k8s
# ------------
# Siempre tiene al menos estos 4 campos (properties)

apiVersion: # depende de que queremos crear depende la version
kind:
metadata:

# spec: (Es un diccionario. Especificaciones para el pod. Cambia segun el tipo de pod.)

# Kind 		     | version
# ---------------+--------
# POD	 		 |	v1
# service	 	 |	v1
# ReplicaSet	 |	v1
# Deployment	 |	v1

metadata: # es un diccionario
	name: myapp-pod
	labels: # (sirven para filtrar los pods. Aca se puede poner cualquier clave/valor)
		app: myapp
		type: front-end
spec:
	containers: # (lista de arrays)
	- name: nginx-container
	  image: nginx-container

# Ejecucion:
kubectl create -f pod-definition.yml


# EJ KUBECTL
# ------------------

kubectl get pods
kubectl describe pod myapp-pod
# Create a new pod with the NGINX image
kubectl run nginx --image=nginx --generator=run-pod/v1
# Generar solamente el YAML
kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml
kubectl create deployment --image=nginx nginx --dry-run -o yaml
kubectl run blue --image=nginx --replicas=6            
# What is the image used to create the new pods?
kubectl describe pod newpod-<id>  
kubectl get pods -o wide 
# How many containers are part of the pod 'webapp'?
kubectl describe pod webapp
# Why do you think the container 'agentx' in pod 'webapp' is in error?
# Asi chequeo los logs
kubectl describe pod webapp
# Delete the 'webapp' Pod.
kubectl delete pod webapp
# Create a new pod with the name 'redis' and with the image 'redis123'
kubectl run redis --image=redis123 --generator=run-pod/v1
# redis123 esta intencionalmente mal
# Now fix the image on the pod to 'redis'.
# Update the pod-definition file and use 'kubectl apply' command or use 'kubectl edit pod redis' command.
# Me abre un vim con el yaml autogenerado en ram del pod, luego de editarlo y guardarlo se hace un apply
kubectl edit pod redis
# Aplicar el yaml
kubectl run -f pod.yaml
kubectl apply -f pod.yaml
# o borrarlo y volverlo a crear
kubectl run -f pod.yaml
# Obtener el yml de un RS
kubectl get rs mi_replica -o yaml > mi_rs.yml
# Escalar replicas
kubectl scale rs new-replica-set --replicas=5
# Deployments
kubectl create -f deployment-definition.yml
kubectl get deployments
# edit
kubectl edit deployment my-deployment
# Pod - Edit
kubectl edit pod <pod-name>
# Pod - Dump
kubectl get pod pod-name -o yaml > yml


# Definiendo el archivo pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis

# ----------------------------
#       REPLICA SETS
# ----------------------------

# Controllers: son los cerebros de k8s, son los ps que monitorean los objetos k8s
# Replication controller (obsoleto:
# 	- ayuda a tener varias instancias del mismo pod en el cluster k8s (HA). Se asegura que un numero especifico
# 	de pods esten corriendo
# 	- Load balancing & scaling: multiple pods en multiples nodos

# Replica set: 
# 	- Esta reemplazando el Replication controller

# ----------------------------
#       DEPLOYMENTS
# ----------------------------
# cambia el kind: Deployment

# Se puede editar cualquier campo/propiedad del template
# de pod, ya que el pod template es hijo de la especificacion
# del deploy. Con cada cambio el deploy automaticamente borra y
# recrea los pods con los cambios

kubectl edit deployment my-deployment

# ----------------
# Rolling updates:
# ----------------
# Cuando tengo una nueva version de mi app las voy aplicando de a "una" y no bajo todas las instancias
# y las reemplazo de una y si algo falla tengo que poder hacer un rollback

# El Deployment incluye aparte de las RS las acciones de cambiar de version, rollback, pausar y aplicar
# cambios y resumir toda app cuando los cambios estan 100% aplicados, etc.

# El Deployment crea automaticamente un RS
# Las RS crean automaticamente los PODS

