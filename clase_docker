Image vs container

image: aplicacion binaria
container: una instancia de la imagen que corre como proceso

puedo tener muchos contenedores de la misma imagen

docker container run --publish 8080:80 --name nombre_propio -d nginx:1.11 nginx -T

-d : detach
-T:  ??

docker top

son 91
secciones 
1,2,3: (23/7)
4: (30/7)
5: (15/8)
6: (23/8)
7: (23/8)
8:
9:
10

a 2 secciones x semana: 4(34min), 5(55min) = Total efectivo: 3hs





21,22, 23, 24 - 25, 27, 27, 28, 29, 30 (tarea muy facil),31,32,33,- 34,35,36,37 - 38, 39, 40, 41, 42, 43 - 
44, 45, 46,47 - 48, 49, 50
51, 52, 53
54, 55, 56
57, 58, 59, 60, 61
62,63
63
64,65,66


Tarea

correr nginx, mysql, apache:

- con detache y nombre
- nginx 80:80
- apache 8080:80
- mysql 3306:3306 --> pasar --env MYSQL_RANDOM_ROOT_PASSWORD=yes
-- Ver logs de mysql para ver que pass le asigno
- Parar todos y borrarlos. Comprobar que estan todos eliminados

22 es la respuesta.

23
Comandos
docker container top
docker container inspect
docker container stats

24
docker container run -it (interactivo), -t: TTY, -i: Interactive 
docker container exec -it (correr comando)
docker container run -ai. -a: attach


25
docker container port nombre

26
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost
docker network ls
docker network inspect
docker network create --driver : crea una red
docker network connect
docker network disconnect

27, 28,29 dns

29
docker container exec -it my_nginx ping new_nginx

33- DNS Round Robin

37 -  re tagear imagenes

docker image tag nginx ctaglia/mi_nginx

30 - Dockerfile

FROM debian:stretch-slim --> Distribucion base

ENV NGINX_VERSION 1.13.6-1~stretch -->  Variables de ambiente. Es la forma de pasar clave/valor

RUN --> Comandos shell a correr dentro del contenedor en build time. Se corre todo el comando con && porque si no
cada comando seria individual en cada layer. Al poner comando1 && comando2 && ...&& comando n, es un solo layer

EXPOSE 80, exponemos puerto 80 a la red virtual docker

CMD --> comando que se va a ejecutar c/vez que corramos restartiemos el contenedor

39 - Buildear dockers

En el lugar donde tenga definido el Dockerfile

# docker image build -t nombre_imagen .

Cuando docker buildea crea un hash por c/layer, asi en una rebuildeada ya usa esos layers y solo
rebuildea los que cambiaron. CUando armo un dockerfile tengo que poner arriba o primero lo que menos cambia o 
no cambia, y abajo lo que cambia. Cuando una linea cambia y es rebuildeada, todas las siguientes son rebuildeadas.

44 - Persistent Data

Volumes: Crea un lugar fuera del Union Filesystem (UFS) del contenedor para guardar archivos. Cualquier contenedor
lo podria ver. Se ve como un punto de montaje

Bind Mounts: montar un share del host

Volume en el dockerfile

docker volume prune --> Borra volumenes no usados

named volumes: permite asignar volumenes a contenedores

docker volume create 

Bind mounting:
mapea un file o directorio a un file o directorio del contenedor. Es como un link duro
No se configura en el dockerfile porque es propio del sistema donde esta corriendo
Se pasa como param con container run

18:20 30/7
Utiles para desarrollo local o testing

docker run -p 80:4000 -v $(pwd):/path_en_docker

Esta bueno para desarrollar, porque edito/compilo desde el host


50

docker compose
==============
Configura las relaciones entre dockers 
conecta todos los dockers que son dependientes (ej: appweb, mysql, proxies, etc)
Aca ya se configuran todos los comandos de c/docker, asi no tengo que recordar
todos los docker run de cada container y resumir todo a un solo comando


Tiene un YML. Se especifican los containers, redes, volumes, vars de ambiente
Tiene una herramienta docker-compose que se usa para desarrollo/automatizacion con esos YML

docker-compose.yml (es el nombre por defecto, pero se puede usar un alternativo: )
- Los yml tienen sus propias versiones


51
docker-compose up: setup volumes/networks y levanta todos los containers
docker-compose down: para todos los containers y remueve todos volumes/networks 


56
swarm
======

docker service create, reemplaza docker container run para clusters

docker service create alpine ping 8.8.8.8
docker service ps boring_goodall

# aplico cambios a un servicio corriendo
docker service update boring_goodall --replicas 3

# elimino un servicio
docker service rm boring_goodall

docker swarm init --advertise-addr <ip address>  # Cuando tengo mas de una tengo que configurar por cual soy manager

docker node ls
docker node update --role manager node2

docker swarm join-token manager 			# Esto lo ejecuto en el manager leader. Y me da el token para que un nodo se asocie directamente como manager


Overlay Multi-host networking

Crea un bridge para un swarm a travez de la red de contenedores
Entonces todos los hosts estan en una "vlan". Es solo para 
comunicacion entre swarms

* --driver overlay cuando creo una network


docker network create --driver overlay mydrupal
docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgresm

routing Mesh
============

es el router que asocia las ips con el nodo/s que tienen el servicio


ejemplo integral swarm
======================

docker network create --driver overlay nombre


Stacks
=======