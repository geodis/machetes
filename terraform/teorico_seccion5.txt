VPC - Virtual Private Network
-----------------------------
- aisla las instancias a nivel de red
- Buena practica: siempre lanzar instancias en una VPC:
    - default
    - o una creada y manejada por terraform
- para setups medianos o chicos un VPC x region esta Ok
- Una instancia de un VPC no se puede comunicar con otra VPC usando
IP privada (si con ip publica, pero no recomendado)
- Se pueden linkear 2 VPCs (peering)

Private SubNets
----------------
10.0.0.0/8  10.0.0.0-10.255.255.255 mask: 255.0.0.0
172.16.0.0/12   172.16.0.0-172.31.255.255 mask:(default de aws)
192.168.0.0/16  192.168.0.0-192.168.255.255

- Cada Zona (ej: us-west-1) tiene su propia Subnet publica y privada

- Cada Subnet Publica esta conectada a un Internet Gateway. Estas instancias
tambien tienen una IP publica para ser alcanzadas desde internet

- services y applications van en la public subnet
- backend, db, caching server van en la private subnet
- Load Balancer tipicamente en la public subnet y las instancias sirviendo
una aplicacion en la private subnet


Ejemplo vpc.tf:
--------------
cidr_block: Classess Inter-Domain Routing. El tamaÃ±o completo de la red. Dentro van
            las subnets
instance_tenancy: Multiple instances en un mismo hardware. Se puede cambiar si
                  se necesita una unica instancia por maquina fisica (sale mas $)

enable_classiclink = false (por si se quiere linkear a EC2 classic. Otro tipo de red de aws)

map_public_ip_on_launch: pedir o no una IP publica (para subnet public). Cuando
                         lance una instancia en una subnet public va a obtener una ip
                         en el rango cidr_block (privado) de esa subnet y una ip publica


# Internet GW
resource "aws_internet_gateway" "main-gw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "main"
  }
}

Route tables son aplicadas a las Instancias (solo si las asocio con las regals de asociacion)
# Route tables
resource "aws_route_table" "main-public" {
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"                # Todo el trafico que no sea interno de la VPC va por default gw
    gateway_id = aws_internet_gateway.main-gw.id    # Este es el default gw
  }
  tags = {
    Name = "main-public-1"
  }
}
# route associations public -- esta es la asignacion del default gw de c/subnet
resource "aws_route_table_association" "main-public-1-a" {
  subnet_id = aws_subnet.main-public-1.id
  route_table_id = aws_route_table.main-public.id
}

# NAT GW -- para proveer acceso a internet a las instancias de la  red privada, pero no vicecersa
-------------------------------------------------------------------------------------------------

resoruce "aws_eip" "nat" { --> es una ip estatica (elasticIP)
    vpc = true
}


Correr EC2 en VPC
-----------------

- con security groups (simil iptables)

--------------
# EBS Volumes - Block Storage
----------------------------
- t2.micro por defecto tiene 8G de EBS. Automaticamente eliminado cuando la instancia se termina
- Algunas instancias tienen lo que se llama Ephemeral Storage (storage local) que se elimina cuando la
instancia se elimina.

Agregar Extra Volumne (persistente post destruccion de la instancia)

# La instancia
resource "aws_instance" "example" {
}

# el Storage
resource "aws_ebs_volume" "ebs-volume-1" {
  availability_zone = "us-west-1"
  size = 20     # Gib
  type = "gp2"  # general prupose storage. Opciones [standard, io1, st1]
  tags = {
    Name = "extra volume data"
  }
}

# La asignacion del device
resource "aws_volume_attachment" "ebs-volume-1-attachment" {
  device_name = "/dev/xvdh"
  instance_id = aws_instance.example.id
  volume_id = aws_ebs_volume.ebs-volume-1.id
}

Si quiero agrandar (los 8G) el storage del root volume en la definicion de instancia:

root_block_device {
    volume_size = 16
    volume_type = "gp2"
    delete_on_termination = "true" # cuando se elimina la instancia
}


# Userdata:
-------------
- Customization at launch. Se ejecuta en la creacion de la instancia, no en el reboot
- install extra soft
- prepare instance to join a cluster
- exec command/scripts
- mount volumes
-
Ejemplo userdata en una linea de string
----------------------------------------
resource "aws_instance" "example" {
....
    # userdata
    user_data = "#!/bin/bash\nwget http://instalador_openvpn/paquete.deb\ndpkg -i paquete.deb"
}

Ejemplo userdata (mejor) con Templates
--------------------------------------

resource "aws_instance" "example" {
....
    user_data = data.template_cloudinit_config.cloudinit-example.rendered
}















