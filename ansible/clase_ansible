

SINTAXIS
--------
ansible [opciones] [serv1,serv2,..,servn:grp1,grp2,...,grpn,:all] [-m modulo] [-a argumentos]

[opciones]
--limit filtro: --limit server1,server2
--user username
--become
-f 2: aplica de a 2 servidores en paralelo (por defecto 5)
--list-hosts: Lista los host a los que aplica el inventario
-C: No aplica las opciones en los servers, solo nos dice si lo puede lograr
-v: verbose

[modulos]
- setup : para obtener la info de un servidor (facts)
- copy  : Si quiero copiar archivos desde un server al resto de los servers: -m copy "src=/etc/hosts dest=/etc/hosts"
ansible all -m copy -a "src=/etc/hosts dest=/etc/hosts"; copia el hosts (local donde ejecuto ansible) a "all"

- yum/apt: para instalaciones:  "name=vim state=present/absent" el estado es en el que quiero que quede





ansible [servidores:grupos] -m ping
ansible all -m ping

ansible [servidores:grupos] -u usuario_remoto -m ping

--become : hace sudo en el remoto
ansible [servidores:grupos] -u usuario_remoto --become -m ping


Ejemplo

[ubuntu]
1.1.1.1
[debian]
2.2.2.2

# Subgrupos (children palabra clave)

[apt:children]
ubuntu
debian

Ej: ansible apt -m "ping"

# Variables. Pueden ser a grupo, grupo padre, host. (vars palabra clave)
[apt:vars]
ansible_become=True

Las variables del host tienen precedencia sobre las variables del grupo

Se pueden separar variables

/etc/ansible/group_vars/grupo
/etc/ansible/host_vars/servidor

El formato de esos archivos (YML) es nombre_variable: valor

Patrones:

hosts: web1.test.xyz, web2.test.xyz, web3.test.xyz....web20.test.xyz

web[1:20].test.xyz
web[a:d].test.xyz


# Puedo usar otro archivo de inventario alternativo para correr un comando
ansible -i archivo_hosts_alternativo

archivo_hosts_alternativo: se usa cuando tengo un archivo de test, devel, produccion


# parametros variables

ansible_connection = ssh
            -> ansible_host
            -> ansible_port
            -> ansible_user
            -> ansible_ssh_private_key_file
           local

ansible_become = True | False
ansible_become_method = su | sudo
ansible_become_user = pepe


# Inventario Dinamico
=====================
La lista dinamica de servers la baja de un 

- Cloud: AWS, Google Cloud Platform, DigitalOcean

- Entorno Propio: Openstack, Ovirt, OpenShift, Zabbix

# Nombre virtual

[ubuntu]
ubuntu1 ansible_host=1.1.1.1


# Combinar inventarios
======================

ansible -i inventarios/ all ..... (en inventarios van archivos como el hosts o plugins.py/ini 
                   de los plugins de ansible para generar inventarios)

Puedo combinar inventarios y filtrar por servers, grupos, etc. Igual que antes pero 
armando la base de servers desde todos los inventarios que haya en inventarios


# Playbooks (jugadas)
=====================
Tareas a realizar en una lista de servidores determinada
Dentro de un file puede haber distintos playbooks


La primer linea arranca con: ---

---
- name: Mi primer playbook
  hosts: all
  remote_user: usuario
  become: True # si lo pongo aca se hace a nivel de playbook, para todas las tareas
  tasks: 
    - name: Copiar archivos hosts
      copy: src=/etc/hosts dest=/etc/hosts owner=root group=root mode=0644
      # ---- Otra sintaxis mas comoda ----
      copy: 
        src: /etc/hosts 
        dest: /etc/hosts 
        owner: root 
        group: root 
        mode: 0644


    - name: 
      become: # Si lo pongo aca se hace a nivel tarea

# Opciones del playbook:
---------------------
become_user
become_method
check_mode
--syntax-check: comprueba la sintaxis del playbook
--list-tasks
--step: pregunta paso a paso para continuar
--start-at-task="nombre de una tarea" arrancar directamente de una tarea especifica de un playbook
--forks=n / -f n: Limita a n tareas en paralelo (def: 5)
-v (vvv) niveles de verbose



Ejecucion:
ansible-playbook [-i inventario] [opciones] playbook.yml


& (and) ! (negacion)  : (separador)

Ejemplos:

hosts: servers_web
hosts: servers_web:&madrid (todos los servers que esten en ambos grupos - servers_web y madrid - )
hosts: servers_web:!madrid (todos los servers_webque no esten en madrid)
hosts: grp1:grp2 (ambos grupos completos)

ansible-playbook --limit 'servers_web:&madrid'

# Variables
===========

Sintaxis: "{{variable}}"

Pueden ser definidass en Facts (obtenidas del server), playbook, linea de comandos (-e)

Pueden ser usadas en 
- Tareas
- Plantillas
- otros (condiciones, bucles, etc)


# Ejemplo plantilla: hosts.j2

{{ miip }} {{ ansible_hostname }} {{ ansible_fqdn }}


# Ejemplo playbook:

- name: ejemplo variables
  hosts: localhost
  connection: local
  vars:
    - miip: "1.1.1.1"
    - milista: ["apache2","mariadb","php5"]
    - otra_sintaxis_lista:
    - apache2
    - mariadb
    - php5    
    - mi_diccionario: {web: 'apache2', bd: 'mariadb', script: 'php5'}
    - mi_diccionario_largo:
      - web: apache2
      - bd: mariadb
      - script: php5
    - texto_largo: |        # sintaxis
           este texto 
           contiene tres
           lineas
    - linea_larga: >        # sintaxis
           esta es una
           linea larga
           pero sin enters
  tasks:
    - name: Crear archivo hosts
      template: src=hosts.j2 dest=/etc/hosts # Este es el copy, pero busca en el directorio templates
    - debug: var=milista
    - debug: var=otra_sintaxis_lista
    - debug: var=mi_diccionario
    - debug: var=mi_diccionario.web
    - debug: var=mi_diccionario.script
    - debug: var=mi_diccionario_largo
    - debug: var=texto_largo
    - debug: var=linea_larga
    - import_tasks: archivo_con_otras_tareas.yml   # El playbook es posible de dividir en sub archivos. Con import_tasks (include --> deprecated) los incluyo
                                                   # 'import_tasks' for static inclusions or 'include_tasks' for dynamic inclusions.



# Obtengo la lista de todas las variables del servidor
ansible localhost -m setup 

# Sobrecargo las variables del playbook con -e miip="5.6.7.8"


# Diccionario
==============

instalar:
  web: apache2
  bd: mariadb
  script: php5

O:
instalar: {web: 'apache2', bd: 'mariadb', script: 'php5'}

Uso: 
  instalar.web
  instalar.bd
  instalar.script


# Modulo debug

Muestra un texto en pantalla, o el valor de una variable

- debug: "un texto"
- debug: var=miip




# Handlers
============

Es una tarea que se ejecuta porque otra tarea la llama
Los handlers se ejecutan al final del playbook

Ej: reiniciar un servicio es la tarea que se ejecuta porque una tarea anterior
copio un archivo de configuracion

- tasks:
  - name: Configurar sshd_config
    copy: src=sshd_config dest=/etc/sshd_config
    notify: reiniciar_sshd


- handlers:
  - name: reiniciar_sshd
    service: name=sshd state=restarted


# Incluyendo archivos en playbook
# ===============================

# include.yml
- name: Primer play
  hosts: repo
  tasks:
    - name: Instalar vim
      yum:  name=vim state=latest
    - import_tasks: instalar2.yml

- name: Segundo play
  import_playbook: segundo_play.yml     # Importar otro playbook

# instalar2.yml
- name: instalar mc
  yum: name=mc state=latest
  
# segundo_play.yml
- hosts: repo
  tasks:
    - name: Instalar tmux
      yum: name=tmux state=latest



# Roles
========

Estructura de directorios:
roles/
    common/               # this hierarchy represents a "role"
        tasks/            #
            main.yml      #  <-- tasks file can include smaller files if warranted
        handlers/         #
            main.yml      #  <-- handlers file
        templates/        #  <-- files for use with the template resource
            ntp.conf.j2   #  <------- templates end in .j2
        files/            #
            bar.txt       #  <-- files for use with the copy resource
            foo.sh        #  <-- script files for use with the script resource
        vars/             #
            main.yml      #  <-- variables associated with this role
        defaults/         #
            main.yml      #  <-- default lower priority variables for this role
        meta/             #
            main.yml      #  <-- role dependencies
        library/          # roles can also include custom modules
        module_utils/     # roles can also include custom module_utils
        lookup_plugins/   # or other types of plugins, like lookup in this case

    webtier/              # same kind of structure as "common" was above, done for the webtier role
    monitoring/           # ""
    fooapp/               # ""



ejemplo:

roles/
  rol_nombre/
    files/    
    templates/
    tasks/      # Obligatorio
    handlers/ 

web
├── instalar.yml
└── rol1
    ├── files
    │   └── borrame.txt
    ├── handlers
    │   └── main.yml
    ├── tasks
    │   └── main.yml
    ├── templates
    │   └── index.html.j2
    └── defaults
        └── main.yml


# Templates
===========

Expresiones: {{variable}} --> {{ansible_fqdn}}

Control: {%...%} --> 

{% if ansible_distribution == "Debian" %}
  ejecutar en debian
{% endif %}

{% for usuario in lista_de_usuarios %}  # En defaults/main.yml se define lista_de_usuarios: ["pepe","paco"]
usuario
{% endfor %}


#Puedo sobrecargar el defaults, por ejemplo en instalar.yml
 roles:
  - {role: rol1, lista_de_usuarios: ["usr1", "usr2"] }

#Sobrecargo desde linea de comandos
$ ansible-playbook -e { "lista_de_usuarios": ["usr1", "usr2"] }

Comentario: {# este es un comentario #}


Ejemplo: index.html.j2

Hola server {{ansible_fqdn}}
{% if ansible_distribution == "CentOS" %}
Es Centos
{% endif %}


cat index.html.j2
Hola server repo.issys.gov.ar
Es Centos



# Variables
============
menor: ---> mayor prioridad

MENOR PRIORIDAD

1.  defaults/ definidas en un role
2.  variables de grupo ( +(prioridad) inventario -> group_vars/all -> group_vars/<grupo> -(prioridad))
3.  variables de servidor (inventario -> host_vars/<servidor> )
4.  "Facts" del servidor
5.  variables del playbook (vars_prompt -> vars_files)
6.  variables del rol (definidas en /roles/rol/vars/main.yml)
7.  variables de bloque -> variables de tareas
8.  parametros de rol --> include_params --> include_vars
9.  set_facts / registered_vars
10. extra vars especificados en la linea de comandos

MAYOR PRIORIDAD


# Condiciones
=============

Es posible condicionar:
  - la ejecucion de una tarea
  - la inclusion de un archivo
  - el uso de un rol

usando la expresion "when"

En el playbook

- name: Tareas para debians
  apt: name=apache2 state=latest
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: Tareas para redhats
  yum: name=httpd state=latest
  when: ansible_distribution == "Debian" or ansible_distribution == "CentOS"


En roles/rol1/tasks
  # Archivo
  main.yml
    - name: Tareas para debians
      include: instalar_apache2.yml
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    - name: Tareas para redhats
      include: instalar_httpd.yml
      when: ansible_distribution == "Debian" or ansible_distribution == "CentOS"

    - name: tarea para todo server
      ............................
  
    # O por rol
    roles:
      - {role: apache2, lista_de_usuarios: ["usr1", "usr2"], when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" }
      - {role: httpd, lista_de_usuarios: ["usr1", "usr2"], when: ansible_distribution == "CentOS" }


  # Archivo
  instalar_apache2.yml
    - name: Tareas para debians
      apt: name=apache2 state=latest

  # Archivo
  instalar_httpd.yml
    - name: Tareas para redhats
      yum: name=httpd state=latest




# Bucles
========

para listas y diccionarios uso "with_items"

- name: instalar soft
  apt: name={{item}} state=latest
  with_items:
    - mariadb
    - php5
    - phpmyadmin

  otro ejemplo



- name: crear usuarios
  user: name={{item.nombre}} state=present groups={{item.grupo}}
  with_items:
    - {nombre: usuario1, grupo: grupo1}
    - {nombre: usuario2, grupo: grupo2}


si uso with_items: {{lista_de_usuarios}} (va a ir a buscar al defaults la definicion de "lista_de_usuarios")


# Register
==========

La expresion register permite guardar en una variable el resultado de una accion realizada
por un modulo en una tarea

Ejemplo:

- name: Ejecutar comando
  command: uptime
  register: salida  <-- este es el nombre de la variable donde se guarda la salida del comando



Archivo register.yml

- name: ejemplo register
  hosts: all
  tasks:
    - name: Ejecutar uptime
      command: uptime
      register: salida_uptime

    - name: Visualizar variable
      debug: var=salida_uptime
      debug: var=salida_uptime.stdout



Valores devueltos:
 - changed
 - failed
 - skipped
 - rc    -> return code
 - stout/stderr/stdout_lines/stderr_lines


Es posible utilizar (ver tasks/main.yml)

- when: salida|changed

salida.rc != 0 --> fallo
salida.rc == 0 --> bien



Ignorar Errores
===============

No se recomienda utilizar 

Ejemplo:
  - name:  comprobar si existe archivo
    command: ls /no_existe.conf
    register: existe
    ignore_errors: true

  - name: Visualizar variable
    debug: var=register.stdout
    when: not register|failed

  - name: Visualizar variable
    debug: var=register.stderr
    when: register|failed



failed_when y changed_when

Podemos marcar una tarea como fallida o cambiada


- name: Uso de failed_when
  hosts: repo
  tasks:
    - name: Obtener interfaces de red
      command: ip a
      register: salida
      failed_when: "'eth2' not in salida.stdout"

    - name: No marcar nunca como cambiada
      command: uptime
      changed_when: false


Modulos
=========

Realizan las acciones en los servers


lista de modulos utiles:

https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html
Aca basicamente hay que usar la doc y los Ejemplos

archive: crea un comprimido de otros archivos
unarchive: extrae un comprimido luego de copiarlo
blockinfile: inserta/actualiza/elimina un bloque de texto en un archivo
copy: copia archivos a servers
fetch: obtiene archivos de servers
file: setea atributos a archivos
find: hace lo mismo que find pero remoto
lineinfile: asegura que una linea este en un archivo o lo reemplaza usando regex
patch: aplica parches usando GNU patch
replace: reemplaza un texto por otro
stat: igual que stat
  ej:
    register: datos
    - debug: msg="es directorio"
      when: datos.stat.isdir

synchronize: usa rsync
tempfile: crea archivos/carpetas temporales
template: copia y procesa una plantilla a un nodo remoto
assert: asegura que se cumplan ciertas condiciones
fail: falla con un mensaje especifico
include: incluye un playbook/tareas
include_rol:
include_vars: incluye vars desde un archivo
pause: pausa por tiempo la ejecucion de un playbook




ejemplo yum
===========

- name: instalar la ultima version de apache2
  yum: 
    name: httpd
    state: latest

- name: actualizar todos los paquetes
  yum:
    name: "*"
    state: latest

- name: instalar grupo
  yum:
    name: "@Development Tools"
    state: present

- name: añadir repo EPEL
  yum_repository:
    name: epel
    description: EPEL repo
    state: present
    baseurl: http://bla.bla.bla



La siguiente lista permite ejecutar comandos en el nodo remoto

- command
- expect -> ejecuta un comando y responde a la introduccion de datos
- raw -> envia comandos sin filtrar por ssh
- script -> transfiere un script y lo ejecuta
- shell -> como command pero usando /bin/sh o /bin/bash (vale && || >> que en command no)




















